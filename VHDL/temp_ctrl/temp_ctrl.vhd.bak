library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;

ENTITY temp_ctrl is
	PORT(
		FPGA_CLK1_50: IN STD_LOGIC;
		KEY			: IN STD_LOGIC_VECTOR(0 DOWNTO 0);
		LED			: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		CONVST		: OUT STD_LOGIC;
		SCK			: OUT STD_LOGIC;
		MISO			: IN STD_LOGIC;	
		MOSI			: OUT STD_LOGIC;
		SS1			: OUT STD_LOGIC;
		SS2			: OUT STD_LOGIC;
		SS3			: OUT STD_LOGIC;
		SS4			: OUT STD_LOGIC
	);
END temp_ctrl;

architecture a of temp_ctrl is

	COMPONENT masterSPI_RW IS
		GENERIC( nBits : INTEGER);
		PORT(
			CLK_50		: IN  STD_LOGIC;
			RST			: IN  STD_LOGIC;
			START			: IN  STD_LOGIC;
			SPEED			: IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
			CPOL			: IN  STD_LOGIC;							--Polaridad
			CPHA			: IN  STD_LOGIC;							--Fase
			CS				: IN  STD_LOGIC_VECTOR(1 DOWNTO 0); --Chip Select
			I_DATA		: IN  STD_LOGIC_VECTOR(nBits-1 DOWNTO 0);
			O_DATA		: OUT STD_LOGIC_VECTOR(nBits-1 DOWNTO 0);
			BUSY			: OUT STD_LOGIC;
			CONVST		: OUT STD_LOGIC;
			SCLK			: OUT STD_LOGIC;
			SS1			: OUT STD_LOGIC;
			SS2			: OUT STD_LOGIC;
			SS3			: OUT STD_LOGIC;
			SS4			: OUT STD_LOGIC;
			MOSI			: OUT STD_LOGIC;
			MISO			: IN  STD_LOGIC);	
	END COMPONENT;


	--Estados
	TYPE estados is (e0, e1, e2, e3);
	SIGNAL ep : estados :=e0; 	--Estado Presente
	SIGNAL es : estados; 		--Estado Siguiente
		
	--Senales de datos para la placa
	constant	numBits 		: integer range 0 to 12 :=12;	--Numero de bits de la trama.
	signal 	reset			: std_logic:='0';
	signal	go				: std_logic;
	signal	speed			: std_logic_vector(1 downto 0):="11";
	signal	enviado		: std_logic_vector(numBits-1 downto 0):=(others=>'0');
	signal	recibido		: std_logic_vector(numBits-1 downto 0):=(others=>'0');
	
	--Se√±ales para el testbench
	signal 	ocupado		: std_logic;
	signal	cnt			: integer range 0 to 4 :=0;
	
	--Senal para cambiar de emisor
	signal CS : std_logic_vector(1 downto 0):="00";
	
	--Senales para comparar.
	signal maxTemp	: std_logic_vector (11 downto 0):="010000000000"; --El ADC es de 12 bits. Hay que inicializarlo bien.
.
	
	--Senales de error
	signal stop : std_logic :='0';


BEGIN

	reset<=NOT(KEY(0));

	PROCESS(FPGA_CLK1_50, ep, reset)
	BEGIN
		IF(rising_edge(FPGA_CLK1_50))THEN
			IF(reset='1')then
				es<=e0;
			ELSE
				CASE ep IS
					WHEN e0 =>
						CS<="00";
						es<=e1;
					WHEN e1 =>
						CS<="01";
						es<=e2;
					WHEN e2 =>
						CS<="10";
						es<=e3;
					WHEN e3 =>
						CS<="11";
						es<=e0;
				END CASE;
			END IF;
		END IF;
	END PROCESS;
	go	<='1' when (ocupado='0' and (ep=e0 or ep=e1 or ep=e2 or ep=e3)) else '0';
	--go<='1' when ocupado='0'; --Seguramente esto tambien valga, pruebalo con HW real.
	
	PROCESS(FPGA_CLK1_50, ocupado, es) --Cuando se libera, paso al siguiente dispositivo.
	BEGIN
		if(falling_edge(ocupado))then
				if(ep=e0)then
					valAmp1 <= recibido;
				elsif(ep=e1)then
					valAmp2 <= recibido;
				elsif(ep=e2)then
					valAmp3 <= recibido;
				else
					valVolt <= recibido;
				end if;
				ep<=es;
		end if;
	END PROCESS;


	inst1: masterSPI_RW
		Generic Map( nBits => numBits)
    	Port Map( 
		CLK_50 	=> FPGA_CLK1_50,
		RST 		=> reset,
		START 	=> go,
		SPEED		=> "11",--Voy a darle 1Mhz. Es hasta demasiado.
		CPOL 		=> '1',
		CPHA		=> '1',
		CS 		=> CS,
		I_DATA 	=> enviado,  --Datos que envio.
		O_DATA 	=> recibido, --Datos que recibo
		BUSY 		=> ocupado,
		CONVST 	=> CONVST,
		SCLK		=> SCK,
		SS1 		=> SS1,
		SS2		=> SS2,
		SS3 		=> SS3,
		SS4		=> SS4,
		MOSI		=> MOSI,
		MISO 		=> MISO
	);
	--Muestro el valor en los leds. Tengo solo 8 leds, asi que cojo los valores mas significativos.
	LED<=recibido(numBits-1 downto numBits-8);
	
	--Control de tension y corriente.
	process(FPGA_CLK1_50)
	begin
		if(rising_edge(FPGA_CLK1_50))then
			if((valAmp1>maxAmp) or (valAmp2>maxAmp) or (valAmp3 >maxAmp) or (valVolt>maxVolt))then
				stop<='1';
			end if;
		end if;
	end process;
	
END a;